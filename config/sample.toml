[etcd]
namespace = "local"                         # env: BACKEND_NAMESPACE
addr = { host = "127.0.0.1", port = 2379 }  # env: BACKEND_ETCD_ADDR (host:port)
user = ""                                   # env: BACKEND_ETCD_USER
password = ""				    # env: BACKEND_ETCD_PASSWORD


[storage-proxy]
# An identifier of this storage proxy, which must be unique in a cluster.
node-id = "i-storage-proxy-01"
num-proc = 4
# The PID file for systemd or other daemon managers to keep track of.
# pid-file = "./storage-proxy.pid"
event-loop = "uvloop"


[api.client]
# Client-facing API
service-addr = { host = "0.0.0.0", port = 6021 }
ssl-enabeld = false


[api.manager]
# Manager-facing API
# Recommended to have SSL and bind on a private IP only accessible by managers
service-addr = { host = "127.0.0.1", port = 6022 }
ssl-enabled = true
ssl-cert = "config/ssl/manager-api-selfsigned.cert.pem"
ssl-privkey = "config/ssl/manager-api-selfsigned.key.pem"


[debug]
enabled = false


[logging]
# One of: "NOTSET", "DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"
# Set the global logging level.
level = "INFO"

# Multi-choice of: "console", "logstash", "file"
# For each choice, there must be a "logging.<driver>" section
# in this config file as exemplified below.
drivers = ["console"]

[logging.pkg-ns]
"" = "WARNING"
"aiotools" = "INFO"
"aiohttp" = "INFO"
"ai.backend" = "INFO"

[logging.console]
# If set true, use ANSI colors if the console is a terminal.
# If set false, always disable the colored output in console logs.
colored = true

# One of: "simple", "verbose"
format = "simple"


[storage]
# storage section may define one or more named subsections with
# backend-specific configurations.


[storage.local]
# The default, generic filesystem.
# It uses the standard syscalls to perform filesystem operations
# such as scanning the file/directory metadata.
# This does *NOT* support per-direcotry quota.
backend = "vfs"
path = "/vfroot/xfs"


[storage.fastlocal]
# An extended version for XFS, which supports per-directory quota
# based on xfs projects.
backend = "xfs"
path = "/vfroot/xfs"


[storage.mypure]
# An extended version for PureStorage FlashBlade nodes, which uses
# RapidFile Tools to perform filesystem metadata queries and the
# FB REST APIs to configure per-directory quota.
backend = "purestorage"
path = "/vfroot/fb1"

[storage.mypure.options]
purity_endpoint = "192.168.0.10:443"
purity_ssl_verify = false
purity_api_token = "xxxxxx"
purity_fs_name = "mypure"  # the name of filesystem used by the filesystem API


[storage.myceph]
# An extended version for CephFS, which supports extended inode attributes
# for per-directory quota and fast metadata queries.
backend = "cephfs"
path = "/vfroot/ceph-fuse"
